https://airbnb.io/lottie/#/web
** Lottie BodyMovin Version 5.13.0 **
Getting Started

Bodymovin can render Lottie JSON files on the web.

First, get the bodymovin player javascript library. It is statically hosted at https://cdnjs.com/libraries/bodymovin or you can get the javascript directly by clicking Get Player in the bodymovin plugin.

<script src="js/bodymovin.js" type="text/javascript"></script>
<!-- OR -->
<script src="https://cdnjs.com/libraries/bodymovin" type="text/javascript"></script>

Bodymovin is also available on npm and bower.

Then playing the animation is as simple as:

var animation = bodymovin.loadAnimation({
  container: document.getElementById('lottie'), // Required
  path: 'data.json', // Required
  renderer: 'svg/canvas/html', // Required
  loop: true, // Optional
  autoplay: true, // Optional
  name: "Hello World", // Name for future reference. Optional.
})

HTML player installation
Static URL

Or you can use the script file from here: https://cdnjs.com/libraries/lottie-web

Usage

Call lottie.loadAnimation() to start an animation. It takes an object as a unique param with:

    animationData: an Object with the exported animation data.
    path: the relative path to the animation object. (animationData and path are mutually exclusive)
    loop: true / false / number
    autoplay: true / false it will start playing as soon as it is ready
    name: animation name for future reference
    renderer: 'svg' / 'canvas' / 'html' to set the renderer
    container: the dom element on which to render the animation

It returns the animation instance you can control with play, pause, setSpeed, etc.

lottie.loadAnimation({
  container: element, // the dom element that will contain the animation
  renderer: 'svg',
  loop: true,
  autoplay: true,
  path: 'data.json' // the path to the animation json
});

Usage

animation instances have these main methods:

    anim.play()
    anim.stop()
    anim.pause()
    anim.setLocationHref(locationHref) -- one param usually pass as location.href. Its useful when you experience mask issue in safari where your url does not have # symbol.
    anim.setSpeed(speed) -- one param speed (1 is normal speed)
    anim.goToAndStop(value, isFrame) first param is a numeric value. second param is a boolean that defines time or frames for first param
    anim.goToAndPlay(value, isFrame) first param is a numeric value. second param is a boolean that defines time or frames for first param
    anim.setDirection(direction) -- one param direction (1 is normal direction.)
    anim.playSegments(segments, forceFlag) -- first param is a single array or multiple arrays of two values each(fromFrame,toFrame), second param is a boolean for forcing the new segment right away
    anim.setSubframe(flag) -- If false, it will respect the original AE fps. If true, it will update as much as possible. (true by default
    anim.destroy()

lottie has 8 main methods:

    lottie.play() -- with 1 optional parameter name to target a specific animation
    lottie.stop() -- with 1 optional parameter name to target a specific animation
    lottie.setSpeed() -- first param speed (1 is normal speed) -- with 1 optional parameter name to target a specific animation
    lottie.setDirection() -- first param direction (1 is normal direction.) -- with 1 optional parameter name to target a specific animation
    lottie.searchAnimations() -- looks for elements with class "lottie"
    lottie.loadAnimation() -- Explained above. returns an animation instance to control individually.
    lottie.destroy() -- To destroy and release resources. The DOM element will be emptied.
    lottie.registerAnimation() -- you can register an element directly with registerAnimation. It must have the "data-animation-path" attribute pointing at the data.json url
    lottie.setQuality() -- default 'high', set 'high','medium','low', or a number > 1 to improve player performance. In some animations as low as 2 won't show any difference. 

Events

    onComplete
    onLoopComplete
    onEnterFrame
    onSegmentStart

you can also use addEventListener with the following events:

    complete
    loopComplete
    enterFrame
    segmentStart
    config_ready (when initial config is done)
    data_ready (when all parts of the animation have been loaded)
    DOMLoaded (when elements have been added to the DOM)
    destroy
